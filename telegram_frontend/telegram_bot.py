# bot.py
import os
import json
import asyncio
from pathlib import Path
from dotenv import load_dotenv
import httpx
from typing import Dict, List, Optional
import re

# –≤–º–µ—Å—Ç–æ requests.post
from mock_backend import gen_microcases, check_solution, review_solution

from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# --------------------
# –ö–æ–Ω—Ñ–∏–≥
# --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000").rstrip("/")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

DATA_DIR = Path("data/backend")
DATA_DIR.mkdir(parents=True, exist_ok=True)
SESSIONS_FILE = DATA_DIR / "sessions.json"

# --------------------
# –°–µ—Å—Å–∏–∏: –ø—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ü–∏—è
# --------------------
def load_sessions():
    if SESSIONS_FILE.exists():
        try:
            return json.loads(SESSIONS_FILE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_sessions(sessions):
    SESSIONS_FILE.write_text(json.dumps(sessions, ensure_ascii=False, indent=2), encoding="utf-8")

# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏ –ø–æ user_id (—Å—Ç—Ä–æ–∫–∞)
# {
#   "session_id": "owner-repo-123-abc123",
#   "microcases": [ { "microcase_id": "...", "file_path": "...", "comment": "...", "solution": "..." }, ... ],
#   "current": 0,
#   "solved": [false, ...],
#   "awaiting_review": false,
#   "streaming": false,
#   "generation_complete": false
# }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_sse_tasks: Dict[str, asyncio.Task] = {}

# --------------------
# HTTP helper
# --------------------
async def post_json(path: str, payload: dict, timeout=15):
    url = f"{BACKEND_URL}{path}"
    async with httpx.AsyncClient(timeout=timeout) as client:
        resp = await client.post(url, json=payload)
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON –≤–µ–∑–¥–µ, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            data = resp.json()
        except Exception:
            data = {"_raw_text": resp.text}
        return resp.status_code, data

async def listen_sse_stream(session_id: str, user_id: str, bot: Bot):
    """Listen to SSE stream and update user session with incoming microcases."""
    url = f"{BACKEND_URL}/stream-microcases/{session_id}"
    sessions = load_sessions()
    
    try:
        async with httpx.AsyncClient(timeout=600) as client:  # 10 minutes timeout
            async with client.stream('GET', url, headers={'Accept': 'text/event-stream'}) as response:
                if response.status_code != 200:
                    await bot.send_message(
                        chat_id=int(user_id), 
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ç–æ–∫—É: HTTP {response.status_code}"
                    )
                    return
                
                async for line in response.aiter_lines():
                    if not line.strip():
                        continue
                    
                    # Parse SSE format
                    if line.startswith('event: '):
                        event_type = line[7:]
                    elif line.startswith('data: '):
                        try:
                            data = json.loads(line[5:])
                            await handle_sse_event(event_type, data, user_id, bot)
                        except json.JSONDecodeError:
                            continue
                        
    except Exception as e:
        sessions = load_sessions()
        if user_id in sessions:
            sessions[user_id]['streaming'] = False
            save_sessions(sessions)
        
        await bot.send_message(
            chat_id=int(user_id), 
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏–∫—Ä–æ–∫–µ–π—Å–æ–≤: {str(e)}"
        )

async def handle_sse_event(event_type: str, data: dict, user_id: str, bot: Bot):
    """Handle different types of SSE events."""
    sessions = load_sessions()
    
    if user_id not in sessions:
        return
    
    session = sessions[user_id]
    
    try:
        if event_type == 'progress':
            message = data.get('message', '–û–±—Ä–∞–±–æ—Ç–∫–∞...')
            step = data.get('step', '')
            
            # Send progress updates to user
            await bot.send_message(
                chat_id=int(user_id), 
                text=f"üîÑ {message}"
            )
            
        elif event_type == 'microcase':
            # New microcase received
            microcase = {
                'microcase_id': data.get('microcase_id'),
                'file_path': data.get('file_path'),
                'line_number': data.get('line_number'),
                'comment': data.get('comment'),
                'solution': data.get('solution')
            }
            
            session['microcases'].append(microcase)
            session['solved'].append(False)
            
            await bot.send_message(
                chat_id=int(user_id), 
                text=f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –º–∏–∫—Ä–æ–∫–µ–π—Å! –í—Å–µ–≥–æ: {len(session['microcases'])}"
            )
            
            # If this is the first microcase and user is not currently solving one
            if len(session['microcases']) == 1 and session['current'] == 0:
                await send_microcase_message_by_bot(bot, int(user_id), microcase)
                
        elif event_type == 'complete':
            message = data.get('message', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            total_accepted = data.get('total_accepted', 0)
            
            session['streaming'] = False
            session['generation_complete'] = True
            
            if total_accepted == 0:
                await bot.send_message(
                    chat_id=int(user_id), 
                    text="üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –º–∏–∫—Ä–æ–∫–µ–π—Å—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
                )
                # Clear session
                sessions.pop(user_id, None)
            else:
                await bot.send_message(
                    chat_id=int(user_id), 
                    text=f"üéâ {message}\n\n–í—Å–µ–≥–æ –º–∏–∫—Ä–æ–∫–µ–π—Å–æ–≤: {total_accepted}"
                )
                
                # If no microcases have been sent yet, send the first one
                if session['current'] == 0 and session['microcases']:
                    await send_microcase_message_by_bot(bot, int(user_id), session['microcases'][0])
            
        elif event_type == 'error':
            error_message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            session['streaming'] = False
            
            await bot.send_message(
                chat_id=int(user_id), 
                text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_message}"
            )
            
            # Clear session on error
            sessions.pop(user_id, None)
            
    except Exception as e:
        print(f"Error handling SSE event: {e}")
    
    finally:
        save_sessions(sessions)


# --------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# --------------------
async def send_microcase_message(update: Update, microcase: dict):
    await send_microcase_message_by_bot(update.get_bot(), update.effective_chat.id, microcase)

async def send_microcase_message_by_bot(bot: Bot, chat_id: int, microcase: dict):
    txt_parts = []
    mc_id = microcase.get("microcase_id") or microcase.get("id") or microcase.get("mc_id") or "<unknown-id>"
    file_path = microcase.get("file_path", "")
    line_number = microcase.get("line_number", "")
    comment = microcase.get("comment", "")
    
    txt_parts.append(f"üìå **–ú–∏–∫—Ä–æ–∫–µ–π—Å #{mc_id}**")
    
    if file_path:
        txt_parts.append(f"üìÑ –§–∞–π–ª: `{file_path}:{line_number}`")
    
    if comment:
        txt_parts.append(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}")
    else:
        # Fallback to old format
        desc = microcase.get("description") or microcase.get("prompt") or ""
        if desc:
            txt_parts.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}")
    
    instructions = microcase.get("instructions")
    if instructions:
        txt_parts.append(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{instructions}")
    
    txt_parts.append("‚û°Ô∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç**")
    
    message_text = "\n\n".join(txt_parts)
    
    try:
        await bot.send_message(chat_id=chat_id, text=message_text, parse_mode='Markdown')
    except Exception:
        # Fallback without markdown if parsing fails
        await bot.send_message(chat_id=chat_id, text=message_text)

# --------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (GitHub) ‚Äî —è –ø–æ—à–ª—é –µ—ë –Ω–∞ backend –∏ –≤–µ—Ä–Ω—É —Ç–µ–±–µ –º–∏–∫—Ä–æ-–∫–µ–π—Å—ã."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
        "- –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É (http...) ‚Äî –Ω–∞—á–Ω—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∏–∫—Ä–æ-–∫–µ–π—Å–æ–≤.\n"
        "- –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–∫—Ä–æ-–∫–µ–π—Å–∞ –ø—Ä–∏—à–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º (–∫–æ–¥/–æ—Ç–≤–µ—Ç).\n"
        "- –ö–æ–≥–¥–∞ –≤—Å–µ –º–∏–∫—Ä–æ-–∫–µ–π—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å—è—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–≤—å—é/–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ.\n"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    user_id = str(update.effective_user.id)
    sessions = load_sessions()

    # –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
    if text.startswith("http"):
        # Check if user already has active streaming session
        if user_id in sessions and sessions[user_id].get('streaming', False):
            await update.message.reply_text("üîÑ –£ –≤–∞—Å —É–∂–µ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ–∫–µ–π—Å–æ–≤. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
            
        await update.message.reply_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –Ω–∞ backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ–∫–µ–π—Å–æ–≤...")
        
        # Start microcase generation with new API (returns 202 with session_id)
        status, data = await post_json("/gen-microcases/", {"url": text, "user_id": user_id})
        if status != 202:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç backend: HTTP {status}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {data}")
            return

        session_id = data.get("session_id")
        if not session_id:
            await update.message.reply_text("‚ùå Backend –Ω–µ –≤–µ—Ä–Ω—É–ª session_id")
            return

        # —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –¥–ª—è streaming
        sessions[user_id] = {
            "session_id": session_id,
            "microcases": [],
            "current": 0,
            "solved": [],
            "awaiting_review": False,
            "streaming": True,
            "generation_complete": False
        }
        save_sessions(sessions)

        await update.message.reply_text(
            f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n"
            f"üÜî Session ID: `{session_id}`\n"
            f"üîÑ –û–∂–∏–¥–∞–π—Ç–µ, –º–∏–∫—Ä–æ–∫–µ–π—Å—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏..."
        )

        # Start SSE listener in background
        bot = context.bot
        task = asyncio.create_task(listen_sse_stream(session_id, user_id, bot))
        active_sse_tasks[user_id] = task
        
        return

    # –Ω–µ —Å—Å—ã–ª–∫–∞: —Å–º–æ—Ç—Ä–∏–º ‚Äî –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –º–∏–∫—Ä–æ-–∫–µ–π—Å
    if user_id not in sessions:
        await update.message.reply_text("–Ø –Ω–µ –≤–∏–∂—É –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (http...) —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    session = sessions[user_id]
    # –µ—Å–ª–∏ –∂–¥—ë–º —Ä–µ–≤—å—é
    if session.get("awaiting_review"):
        review_text = text
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–≤—å—é –Ω–∞ –æ—Ü–µ–Ω–∫—É...")
        status, data = await post_json("/evaluate-review/", {"user_id": user_id, "review": review_text})
        if status != 200:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç backend –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–µ–≤—å—é: HTTP {status}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {data}")
            return
        # –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        score = data.get("score")
        feedback = data.get("feedback") or data.get("comment") or data
        await update.message.reply_text(f"–û—Ü–µ–Ω–∫–∞ —Ä–µ–≤—å—é: {score}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{feedback}")
        # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        sessions.pop(user_id, None)
        save_sessions(sessions)
        await update.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
        return

    # –∏–Ω–∞—á–µ ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–∏–∫—Ä–æ-–∫–µ–π—Å
    current_index = session.get("current", 0)
    microcases = session.get("microcases", [])
    if current_index >= len(microcases):
        await update.message.reply_text("–í—Å–µ –º–∏–∫—Ä–æ-–∫–µ–π—Å—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ù–∞–ø–∏—à–∏ —Ä–µ–≤—å—é (–ø–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ —Ä–µ—à–∏–ª).")
        session["awaiting_review"] = True
        save_sessions(sessions)
        return

    mc = microcases[current_index]
    mc_id = mc.get("microcase_id") or mc.get("id") or mc.get("mc_id") or f"idx_{current_index}"
    solution = text  # –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ

    await update.message.reply_text("‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...")
    payload = {"user_id": user_id, "microcase_id": mc_id, "solution": solution}
    status, data = await post_json("/check-microcase/", payload)

    if status != 200:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç backend: HTTP {status}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {data}")
        return

    # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {"status":"passed"} –∏–ª–∏ {"status":"failed", "input":..., "expected":..., "actual":...}
    result_status = data.get("status") or data.get("result") or ""
    if result_status == "passed" or result_status == "ok":
        session["solved"][current_index] = True
        session["current"] = current_index + 1
        save_sessions(sessions)
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∏–∫—Ä–æ-–∫–µ–π—Å—É.")
        # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if session["current"] < len(microcases):
            next_mc = microcases[session["current"]]
            await send_microcase_message(update, next_mc)
        else:
            # –≤—Å–µ —Ä–µ—à–µ–Ω—ã
            session["awaiting_review"] = True
            save_sessions(sessions)
            await update.message.reply_text(
                "üéâ –¢—ã —Ä–µ—à–∏–ª –≤—Å–µ –º–∏–∫—Ä–æ-–∫–µ–π—Å—ã! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–≤—å—é/–ø–æ—è—Å–Ω–µ–Ω–∏–µ: "
                "–ø–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ —Ä–µ—à–∏–ª, —á—Ç–æ –≤—ã–Ω–µ—Å –∏–∑ —Ä–µ—à–µ–Ω–∏—è –∏ —Ç.–ø. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç."
            )
        return
    else:
        # –Ω–µ –ø—Ä–æ—à–ª–∏: –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç backend –µ—Å–ª–∏ –µ—Å—Ç—å
        input_data = data.get("input") or data.get("given_input")
        expected = data.get("expected")
        actual = data.get("actual")
        msg = ["‚ùå –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã."]
        if input_data is not None:
            msg.append(f"\n–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{input_data}")
        if expected is not None:
            msg.append(f"\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{expected}")
        if actual is not None:
            msg.append(f"\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{actual}")
        # –≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        if data.get("explanation"):
            msg.append(f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{data.get('explanation')}")
        await update.message.reply_text("\n".join(msg))
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.")
        return

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º
    user_id = str(update.effective_user.id)
    sessions = load_sessions()
    if user_id not in sessions:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (http...) —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    doc = update.message.document
    if not doc:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.")
        return

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å (–≤ –∫–∞—Ç–∞–ª–æ–≥–µ data/backend/tmp)
    tmp_dir = DATA_DIR / "tmp"
    tmp_dir.mkdir(exist_ok=True)
    file_path = tmp_dir / doc.file_name
    # –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    file = await context.bot.get_file(doc.file_id)
    await file.download_to_drive(custom_path=str(file_path))

    # —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π)
    try:
        solution_text = file_path.read_text(encoding="utf-8")
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç. –û—Ç–ø—Ä–∞–≤—å —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    # –¥–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–¥ –∏–∑ handle_text:
    update.message.text = solution_text  # –≤—Ä–µ–º–µ–Ω–Ω–æ
    await handle_text(update, context)
    # —É–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ
    try:
        file_path.unlink()
    except Exception:
        pass

async def cleanup_sse_tasks():
    """Clean up any active SSE tasks."""
    for user_id, task in active_sse_tasks.items():
        if not task.done():
            task.cancel()
            print(f"Cancelled SSE task for user {user_id}")
    active_sse_tasks.clear()

# --------------------
# main
# --------------------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    # –î–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º)
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: —Å—Å—ã–ª–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSE...")
    print(f"üì° Backend URL: {BACKEND_URL}")
    
    try:
        app.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        # Clean up SSE tasks
        asyncio.run(cleanup_sse_tasks())
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()