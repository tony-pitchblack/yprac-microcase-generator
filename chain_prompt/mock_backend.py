# mock_backend.py
import random

def gen_microcases(repo_url: str):
    """–ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ-–∫–µ–π—Å–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    return {
        "status": "ok",
        "microcases": [
            {"id": 1, "task": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª."},
            {"id": 2, "task": "–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º."}
        ]
    }


def check_solution(microcase_id: int, solution: str):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
    # —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    passed = random.choice([True, False])

    if passed:
        return {
            "status": "passed",
            "message": f"‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ {microcase_id} –ø—Ä–æ–π–¥–µ–Ω—ã!"
        }
    else:
        return {
            "status": "failed",
            "message": f"‚ùå –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ {microcase_id} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.",
            "input": "[1, 2, 3]",
            "expected": "6",
            "got": "5"
        }


def review_solution(text: str):
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–≤—å—é —Å –ø–æ–º–æ—â—å—é GPT"""
    return {
        "status": "ok",
        "review": (
            "üìù –¢—ã –Ω–∞–ø–∏—Å–∞–ª —Ä–µ—à–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.\n"
            "–•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª list comprehension.\n"
            "–°–ª–µ–¥–∏ –∑–∞ –∏–º–µ–Ω–∞–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏."
        )
    }
