.body { 

  background-color: #fff; 

} 

 

.header { 

  position: relative; 

  display: flex; 

  justify-content: space-between; 

  align-items: center; 

  height: 289px; 
###
Фиксацию высоту необходимо удалить.
Не рекомендуется задавать фиксированную высоту блокам, так как это может привести к проблемам с отображением при изменении количества контента. При добавлении контента он может выйти за пределы блока, а при удалении может образоваться лишнее пустое пространство.
Высота блока должна определяться его содержимым автоматически. Это обеспечит корректное отображение независимо от количества и размера контента внутри блока.
Такой подход делает отображение более гибким и устойчивым к изменениям в будущем, когда может потребоваться добавить или удалить контент.
###
  margin-right: 50px; 

  margin-bottom: 4px; 

  margin-left: 50px; 

} 

 

.header__menu { 

  display: flex; 

  justify-content: space-around; 

  align-items: center; 

  gap: 12px; 

  width: 392px; 

  font-size: 18px; 

  list-style: none; 

} 

  

.list__marker { 

  width: 6px; 

  height: 6px; 

  border: 1px solid black; 

  border-radius: 50%; 

} 

 

.header__links-list-item { 

  font-size: 18px; 

} 

 

.header__link_active { 

  text-decoration: none; 

} 

 

.logo__black { 

  position: absolute; 
###
Абсолютное позиционирование вместе с координатами необходимо удалить.
Использование абсолютного позиционирования (position: absolute) является нежелательной практикой, которая существенно усложняет разработку и поддержку веб-страниц. Элементы с абсолютным позиционированием выпадают из нормального потока документа, что означает, что другие элементы "не видят" их и не реагируют на их присутствие.
При изменении контента в абсолютно позиционированном элементе (например, добавление текста или изображений) окружающие элементы не адаптируются автоматически, что может привести к наложению контента или появлению нежелательных пробелов. Верстка с использованием абсолютного позиционирования становится хрупкой и сложной в поддержке, особенно при адаптивном дизайне или при необходимости внесения изменений.
Такой подход создает тесную связь между HTML и CSS, делая код менее гибким и более сложным для переиспользования. Вместо абсолютного позиционирования рекомендуется использовать современные методы верстки, такие как Flexbox или Grid, которые обеспечивают более надежное и гибкое управление макетом.
###
  top: 93px; 

  left: 427px; 

  width: 148px; 

  height: 105px; 

  background-image: url('../images/logo-black.svg'); 

  background-repeat: no-repeat; 

  background-position: center; 

  background-size: contain; 

} 

 

.address { 

  font-size: 18px; 

  font-style: normal; 

  letter-spacing: -1px; 
###
Стиль не по макету
###

  list-style: none; 

} 

 

.address__header { 

  margin-right: 37px; 

  line-height: 24px; 

} 

 

.cover { 

  position: relative; 

  height: 757px; 
###
При использовании фиксированного значения свойства height для блока могут возникнуть проблемы с отображением контента при увеличении кол-во контента в блоке.
Для декоративного блока следует использовать свойство min-height, которое задает минимальную высоту блока, позволяя ему автоматически расширяться при необходимости. Это обеспечивает более гибкое и надежное отображение контента.
Подробнее про свойство min-height ⇒ https://developer.mozilla.org/en-US/docs/Web/CSS/min-height
###

  background-image: url('../images/cover.jpg'); 

  background-position: center; 

  background-size: cover; 

} 

 

.overlay { 
###
При абсолютном позиционировании важно указывать как минимум одну координату. Это гарантирует точное размещение элемента, предотвращает наложения и обеспечивает кроссбраузерную совместимость. Без координат элемент может оказаться в непредсказуемом положении, нарушая отображение.
Добавление координат улучшает читаемость кода для других разработчиков. Позволяет быстрее понять структуру и расположение элементов на странице, что в свою очередь ускоряет процесс разработки и поддержки. Когда код легко читается и интерпретируется, это снижает вероятность ошибок и упрощает внесение изменений в будущем.
Подробнее про координаты => https://doka.guide/css/top-left-right-bottom/
Подробнее про позиционирование => https://doka.guide/css/position/
###

position: absolute; 

z-index: 1; 

width: 100%; 

height: 100%; 

background-color: rgba(0, 0, 0, 0.6); 

} 

 

.cover__title { 

  position: absolute; 
###
Абсолютное позиционирование вместе с координатами необходимо удалить.
Использование абсолютного позиционирования (position: absolute) является нежелательной практикой, которая существенно усложняет разработку и поддержку веб-страниц. Элементы с абсолютным позиционированием выпадают из нормального потока документа, что означает, что другие элементы "не видят" их и не реагируют на их присутствие.
При изменении контента в абсолютно позиционированном элементе (например, добавление текста или изображений) окружающие элементы не адаптируются автоматически, что может привести к наложению контента или появлению нежелательных пробелов. Верстка с использованием абсолютного позиционирования становится хрупкой и сложной в поддержке, особенно при адаптивном дизайне или при необходимости внесения изменений.
Такой подход создает тесную связь между HTML и CSS, делая код менее гибким и более сложным для переиспользования. Вместо абсолютного позиционирования рекомендуется использовать современные методы верстки, такие как Flexbox или Grid, которые обеспечивают более надежное и гибкое управление макетом.
###

  top: 165px; 

  left: 50px; 

  z-index: 2; 

  display: flex; 

  flex-direction: column; 

  justify-content: space-between; 

  width: 1030px; 

  height: 386px; 

  color: #fff; 

  letter-spacing: 30px; 

} 

 

.ono { 

  display: flex; 

  justify-content: flex-start; 

  align-items: flex-start; 

  font-size: 100px; 

} 

 

.tebe { 

  display: flex; 

  justify-content: center; 

  align-items: center; 

  font-size: 100px; 

} 

 

.nado { 

  display: flex; 

  justify-content: flex-end; 

  align-items: flex-end; 

  font-size: 100px; 

} 

 

.cover__description { 

  position: absolute; 
###
Абсолютное позиционирование вместе с координатами необходимо удалить.
Использование абсолютного позиционирования (position: absolute) является нежелательной практикой, которая существенно усложняет разработку и поддержку веб-страниц. Элементы с абсолютным позиционированием выпадают из нормального потока документа, что означает, что другие элементы "не видят" их и не реагируют на их присутствие.
При изменении контента в абсолютно позиционированном элементе (например, добавление текста или изображений) окружающие элементы не адаптируются автоматически, что может привести к наложению контента или появлению нежелательных пробелов. Верстка с использованием абсолютного позиционирования становится хрупкой и сложной в поддержке, особенно при адаптивном дизайне или при необходимости внесения изменений.
Такой подход создает тесную связь между HTML и CSS, делая код менее гибким и более сложным для переиспользования. Вместо абсолютного позиционирования рекомендуется использовать современные методы верстки, такие как Flexbox или Grid, которые обеспечивают более надежное и гибкое управление макетом.
###

  bottom: 50px; 

  left: 50px; 

  z-index: 2; 

  display: flex; 

  justify-content: space-between; 

  align-items: center; 

  width: 1000px; 

  color: #fff; 

  font-size: 22px; 

  text-transform: uppercase; 

  word-spacing: 19px; 

} 

 

.bet-button { 

  width: 256px; 

  height: 51px; 

  border: 1px solid white; 

  color: #fff; 

  font-size: 22px; 

  text-transform: uppercase; 

  background: none; 

  cursor: pointer; 

} 

 

.lots { 

  width: 1052px; 

  margin-top: 180px; 

  margin-left: 24px; 

} 

 

.lots__heading { 

  margin-bottom: 27px; 

  margin-left: 40px; 

  font-weight: bold; 

  font-size: 40px; 

  text-transform: uppercase; 

} 

 

.lots__card-list { 
###
При увеличении кол-во карточек блоке lots(по заданию) карточка должна переносится на новую строку, Вам пригодится правило flex-wrap для списка
Подробнее => https://doka.guide/css/flex-wrap/
###
  display: flex; 

  gap: 25px; 

  margin: auto; 

  list-style: none; 

} 